{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","getFile","bind","state","src","grid","maxScale","showResolution","cropOutput","width","height","scaleStep","backgroundColor","showScaleButtons","className","this","type","id","name","accept","onChange","checked","setState","value","event","target","scaleSizes","displayResolution","drawGrid","onScaleApply","data","then","result","onCancel","onClick","context","reader","FileReader","onload","fsEvent","readAsDataURL","files","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.2c85ebf4.chunk.js","sourcesContent":["import React from 'react';\nimport ReactImageScaler from 'react-image-scaler';\nimport './index.css';\n\nexport default class App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.getFile = this.getFile.bind(this);\n\n    this.state = {\n      src: null,\n      grid: true,\n      maxScale: 3,\n      showResolution: false,\n      cropOutput: null,\n      width: 1024,\n      height: 786,\n      scaleStep: 0.1,\n      backgroundColor: '#000000',\n      showScaleButtons: true\n    }\n  }\n\n  render() {\n    return(\n      <div className='react-scale-example'>\n        {(!this.state.src && !this.state.cropOutput) && \n        <div className='react-scale-settings'>\n          <h1>\n            React Scale Example\n          </h1>\n          <p>\n            Please choose a file to load into the scaler, choose scaler settings before file.\n          </p>\n          <input type=\"file\" id=\"avatar\" name=\"avatar\" accept=\"image/png, image/jpeg\" onChange={this.getFile}></input>\n          <h2>Prop Settings</h2>\n          <div className='options'>\n            <ul>\n              <li className='option'>\n                  <input type='checkbox' checked={this.state.grid} onChange={() => {\n                    this.setState({\n                      grid: !this.state.grid\n                    });\n                  }}/>\n                  <label>Draw Grid</label>\n                </li>\n              <li className='option'>\n                  <input type='checkbox' checked={this.state.showResolution} onChange={() => {\n                    this.setState({\n                      showResolution: !this.state.showResolution\n                    });\n                  }}/>\n                  <label>Show Resolution</label></li>\n              <li className='option'>\n                  <input type='checkbox' checked={this.state.showScaleButtons} onChange={() => {\n                    this.setState({\n                      showScaleButtons: !this.state.showScaleButtons\n                    });\n                  }}/>\n                  <label>Show Scale Buttons</label></li>\n            </ul>\n            <ul>\n              <li className='option'>\n                <span>Width: </span><input type='number' value={this.state.width} onChange={(event) => {\n                  this.setState({\n                    width: event.target.value\n                  });\n                }}/>\n              </li>\n              <li className='option'>\n                <span>Height: </span><input type='number' value={this.state.height} onChange={(event) => {\n                    this.setState({\n                      height: event.target.value\n                    });\n                  }}/>\n              </li>\n              <li className='option'>\n                <span>Background: </span><input type='text' value={this.state.backgroundColor} onChange={(event) => {\n                    this.setState({\n                      backgroundColor: event.target.value\n                    });\n                  }}/>\n              </li>\n              <li className='option'>\n\n              </li>\n            </ul>\n          </div>\n        </div>\n        }\n        {\n          this.state.src && <div className='image-scaler'><ReactImageScaler scaleSizes={this.state.showScaleButtons} maxScale={this.state.maxScale} displayResolution={this.state.showResolution} backgroundColor={this.state.backgroundColor} drawGrid={this.state.grid} width={this.state.width} height={this.state.height} src={this.state.src} onScaleApply={(data) => {\n            data.then((result) => {\n              this.setState({\n                cropOutput: result,\n                src: null\n              });\n            });\n          }} onCancel={() => {\n            this.setState({\n              src: null\n            });\n          }}/></div>\n        }\n        {\n          this.state.cropOutput && \n          <div className='react-scale-preview'>\n            <h2>Scale Preview</h2>\n            <p>\n              <img src={this.state.cropOutput}/>\n            </p>\n            <button onClick={() => {\n              this.setState({\n                src: null,\n                cropOutput: null\n              });\n            }}>Reset</button>\n          </div>\n        }\n      </div>\n    );\n  }\n\n  getFile(event) {\n    const context = this;\n    const reader = new FileReader();\n    reader.onload = function(fsEvent) {\n      context.setState({\n        src: fsEvent.target.result\n      });\n    }\n    reader.readAsDataURL(event.target.files[0])\n  }\n}\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}